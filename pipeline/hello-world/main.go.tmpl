package main

import (
	"fmt"
	"context"

	"github.com/open-integration/core"
	"github.com/open-integration/core/pkg/event"
	"github.com/open-integration/core/pkg/state"
	"github.com/open-integration/core/pkg/task"
)

func main() {
	pipe := core.Pipeline{
		Metadata: core.PipelineMetadata{
			Name: "{{ .Metadata.Name }}",
		},
		Spec: core.PipelineSpec{
			Services: []core.Service{
			{{ range .Services }}
				core.Service{
					As:      "{{ .As }}",
					Name:    "{{ .Name }}",
					Version: "{{ .Version }}",
				},
			{{ end }}
			},
			Reactions: []core.EventReaction{
				{{ range $i, $eventReaction := .EventReactions -}}
					{
						Condition: {{ BuildCondition .Condition }},
						Reaction: func(ev event.Event, state state.State) []task.Task {
                        	return []task.Task{
								{{ range $eventReaction.Reactions -}}
								core.NewFunctionTask("{{ BuildTaskFunction .Name  }}", Run{{ BuildTaskRunner .Name }}),
								{{ end }}
                        	}
						},
					},
				{{- end }}
			},
		},
	}
	e := core.NewEngine(&core.EngineOptions{
		Pipeline: pipe,
	})
	core.HandleEngineError(e.Run())
}

{{ range $i, $eventReaction := .EventReactions }}
{{ range $eventReaction.Reactions -}}


func Run{{ BuildTaskRunner .Name }}(ctx context.Context, options task.RunOptions) ([]byte, error) {
	fmt.Println("*****************")
	fmt.Println("Hello World")
	fmt.Println("*****************")
	return []byte{}, nil
}

{{ end }}
{{ end }}